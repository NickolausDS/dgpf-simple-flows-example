"""
Django settings for dgpf_flows_example project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import globus_sdk

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-generate-new-key-with-openssl-rand-hex-32-asdf-aoeu"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Used to simplify making a pretty Django form
    "crispy_forms",
    "crispy_bootstrap4",
    # Used for providing Globus Auth helpers and some starter templates
    "globus_portal_framework",
    "social_django",
    # This app
    "dgpf_flows_example",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "globus_portal_framework.middleware.ExpiredTokenMiddleware",
    "globus_portal_framework.middleware.GlobusAuthExceptionMiddleware",
    "social_django.middleware.SocialAuthExceptionMiddleware",
]

# Authentication backends setup OAuth2 handling and where user data should be
# stored
AUTHENTICATION_BACKENDS = [
    "globus_portal_framework.auth.GlobusOpenIdConnect",
    "django.contrib.auth.backends.ModelBackend",
]

ROOT_URLCONF = "dgpf_flows_example.urls"


CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"
CRISPY_TEMPLATE_PACK = "bootstrap4"
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
                "django.contrib.messages.context_processors.messages",
                "globus_portal_framework.context_processors.globals",
            ],
        },
    },
]

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "sqlite",
    }
}

# This is a general Django setting if views need to redirect to login
# https://docs.djangoproject.com/en/4.2/ref/settings/#login-url
LOGIN_URL = "/login/globus"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

FLOW_ID = ""
if not FLOW_ID:
    raise ValueError(
        "Please set FLOW_ID in your settings.py. Find your flow id by running create_flow.py"
    )
# This dictates which scopes will be requested on each user login
FLOW_SCOPE_NAME = f"flow_{FLOW_ID.replace('-', '_')}_user"
SOCIAL_AUTH_GLOBUS_SCOPE = [
    "openid",
    "profile",
    "email",
    globus_sdk.SpecificFlowClient(FLOW_ID).scopes.url_scope_string(FLOW_SCOPE_NAME),
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "stream": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "django": {"handlers": ["stream"], "level": "INFO"},
        "django.db.backends": {"handlers": ["stream"], "level": "WARNING"},
        "globus_portal_framework": {"handlers": ["stream"], "level": "DEBUG"},
        "dgpf_flows_example": {
            "handlers": ["stream"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_ROOT = BASE_DIR / "static"
STATIC_URL = "/static/"

try:
    from dgpf_flows_example.local_settings import *
except ImportError:
    contents = """
        SOCIAL_AUTH_GLOBUS_KEY = "key"
        SOCIAL_AUTH_GLOBUS_SECRET = "secret"
    """
    print(
        f'Create a file called "local_settings.py" next to your "settings.py" file with the following:\n\n {contents}'
    )
    raise Exception("Portal Start Failed, please resolve the auth errors first!")
